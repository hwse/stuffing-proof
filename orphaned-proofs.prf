("bitstuffing" bitstuffing stuff_TCC8 0 (stuff_TCC8-1 nil 3757503693 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_TCC7 0 (stuff_TCC7-1 nil 3757503693 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posint nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing stuff_TCC6 0 (stuff_TCC6-1 nil 3757503693 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_starts 0 (waddawwda "wdawaddaw" 3757504874 ("" (rewrite "stuff") (("" (measure-induct+ "s`length" "s") (("1" (smash) (("1" (skosimp) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil)) nil)) nil) nil shostak) (stuff_starts-1 nil 3757503735 ("" (skosimp) (("" (rewrite "stuff") (("" (postpone) nil nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing stuff_starts_TCC1 0 (stuff_starts_TCC1-1 nil 3757503693 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (max_rep const-decl "nat" bitstuffing nil) (below type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (stuffed_bit_seq type-eq-decl nil bitstuffing nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing tail_smaller_TCC1 0 (tail_smaller_TCC1-1 nil 3757507775 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing tail_smaller 0 (tail_smaller-1 nil 3757507786 ("" (skosimp) (("" (assert) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak))("bitstuffing" bitstuffing stuff_starts 0 (stuff_starts-1 nil 3757513521 ("" (rewrite "stuff") (("" (measure-induct+ "s`length" "s") (("1" (skosimp) (("1" (smash) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing stuff_starts_TCC1 0 (stuff_starts_TCC1-1 nil 3757513064 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (MAX_REP const-decl "nat" bitstuffing nil) (below type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (min_seq type-eq-decl nil bitstuffing nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing STUFF_TEST 0 (STUFF_TEST-1 nil 3757515120 ("" (assert) (("" (expand "stuffed?") (("" (assert) (("" (inst 1 "0") (("" (skolem!) (("" (assert) (("" (expand "finseq_appl") (("" (smash) (("1" (expand "cons") (("1" (expand "single") (("1" (assert) (("1" (expand "o") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "cons") (("2" (expand "single") (("2" (expand "o") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((stuffed? const-decl "bool" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fix_seq type-eq-decl nil bitstuffing nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (FALSE const-decl "bool" booleans nil) (single const-decl "fix_seq(1)" bitstuffing nil) (below type-eq-decl nil naturalnumbers nil) (O const-decl "finseq" finite_sequences nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) shostak))("bitstuffing" bitstuffing fix_stuffed_TCC1 0 (fix_stuffed_TCC1-1 nil 3757567618 ("" (subtype-tcc) nil nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (bit_seq type-eq-decl nil bitstuffing nil) (MAX_REP const-decl "above(0)" bitstuffing nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (maximal type-eq-decl nil bitstuffing nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (stuffed? const-decl "bool" bitstuffing nil)) nil))("bitstuffing" bitstuffing stuff_TCC11 0 (stuff_TCC11-1 nil 3757507963 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC10 0 (stuff_TCC10-1 nil 3757507963 ("" (skosimp) (("" (skosimp) (("" (assert) nil nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC9 0 (stuff_TCC9-1 nil 3757507775 ("" (skosimp) (("" (assert) (("" (skosimp) (("" (assert) nil nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC8 0 (stuff_TCC8-1 nil 3757507775 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC7 0 (stuff_TCC7-1 nil 3757507775 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC6 0 (stuff_TCC6-1 nil 3757507775 ("" (skosimp) (("" (assert) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC5 0 (stuff_TCC5-1 nil 3757503693 ("" (skosimp) (("" (assert) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC4 0 (stuff_TCC4-1 nil 3757503693 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC3 0 (stuff_TCC3-1 nil 3757503693 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC2 0 (stuff_TCC2-1 nil 3757503693 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC1 0 (stuff_TCC1-1 nil 3757503693 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty_seq const-decl "finseq" finite_sequences nil)) nil))("bitstuffing" bitstuffing cons_TCC4 0 (ohno "i have no idea" 3757523292 ("" (skolem!) (("" (split) (("1" (typepred "head!1") (("1" (typepred "tail!1") (("1" (assert) (("1" (smash) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak) (cons_TCC4-1 nil 3757522114 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing cons_TCC3 0 (cons_TCC3-1 nil 3757522114 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (maximal type-eq-decl nil bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (MAX_REP const-decl "above(0)" bitstuffing nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (below type-eq-decl nil naturalnumbers nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (finseq type-eq-decl nil finite_sequences nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (stuffed_bit_seq type-eq-decl nil bitstuffing nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (XOR const-decl "bool" xor_def nil) (accept_bool type-eq-decl nil bitstuffing nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing cons_TCC2 0 (cons_TCC2-1 nil 3757522114 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (maximal type-eq-decl nil bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (MAX_REP const-decl "above(0)" bitstuffing nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (below type-eq-decl nil naturalnumbers nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (finseq type-eq-decl nil finite_sequences nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (stuffed_bit_seq type-eq-decl nil bitstuffing nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (XOR const-decl "bool" xor_def nil) (accept_bool type-eq-decl nil bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil)) nil))("bitstuffing" bitstuffing empty_TCC2 0 (empty_TCC2-1 nil 3757522114 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (stuffed? const-decl "bool" bitstuffing nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (finseq type-eq-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (empty_seq const-decl "finseq" finite_sequences nil)) nil))("bitstuffing" bitstuffing empty_TCC1 0 (empty_TCC1-1 nil 3757522114 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuffed_bit_seq_TCC1 0 (stuffed_bit_seq_TCC1-1 nil 3757522114 ("" (subtype-tcc) nil nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (bit_seq type-eq-decl nil bitstuffing nil) (MAX_REP const-decl "above(0)" bitstuffing nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (maximal type-eq-decl nil bitstuffing nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (stuffed? const-decl "bool" bitstuffing nil)) nil))("bitstuffing" bitstuffing cons_same_head_TCC2 0 (cons_same_head_TCC2-1 nil 3757567434 ("" (subtype-tcc) nil nil) ((single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing cons_same_head_TCC1 0 (cons_same_head_TCC1-1 nil 3757567434 ("" (subtype-tcc) nil nil) ((single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing cons_stuffed 0 (cons_stuffed-1 nil 3757567976 ("" (skosimp) (("" (assert) (("" (expand "stuffed?") (("" (smash) (("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing cons_stuffed_TCC1 0 (cons_stuffed_TCC1-1 nil 3757567434 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing cons_xor_TCC1 0 (cons_xor_TCC1-1 nil 3757587923 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing cons_stuffed_TCC2 0 (cons_stuffed_TCC2-1 nil 3757747460 ("" (subtype-tcc) nil nil) ((single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing for_helper 0 (for_helper-1 nil 3757747473 ("" (skolem!) (("" (flatten) (("" (assert) (("" (skolem!) (("" (case "y!1=0") (("1" (assert) nil nil) ("2" (inst -2 "y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (y!1 skolem-const-decl "between(0, l!1)" bitstuffing nil) (l!1 skolem-const-decl "above(0)" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (between type-eq-decl nil bitstuffing nil)) shostak))("bitstuffing" bitstuffing for_helper_TCC3 0 (for_helper_TCC3-1 nil 3757747460 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing for_helper_TCC2 0 (for_helper_TCC2-1 nil 3757747460 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing for_helper_TCC1 0 (for_helper_TCC1-1 nil 3757747460 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing reverse_condition_TCC4 0 (reverse_condition_TCC4-1 nil 3757841257 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing module 0 (module-1 nil 3757862519 ("" (assert) (("" (expand "mod") (("" (assert) nil nil)) nil)) nil) ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "below(m)" mod nil)) shostak))("bitstuffing" bitstuffing mod_get 0 (mod_get-1 nil 3757865013 ("" (skolem!) (("" (expand "mod") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing mod_get_TCC1 0 (mod_get_TCC1-1 nil 3757864993 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_helper_TCC2 0 (stuff_helper_TCC2-1 nil 3757587923 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_helper_TCC1 0 (stuff_helper_TCC1-1 nil 3757587923 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing consable_helper 0 (consable_helper-1 nil 3757786431 ("" (skolem!) (("" (flatten) (("" (assert) (("" (skolem!) (("" (inst -1 "i!1+1") (("" (lemma "cons_get") (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing consable_helper_TCC4 0 (consable_helper_TCC4-1 nil 3757786347 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing consable_helper_TCC3 0 (consable_helper_TCC3-1 nil 3757786347 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing consable_helper_TCC2 0 (consable_helper_TCC2-1 nil 3757786347 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing consable_helper_TCC1 0 (consable_helper_TCC1-1 nil 3757786347 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing reverse_condition 0 (reverse_condition-1 nil 3757841273 ("" (skolem!) (("" (flatten) (("" (skolem!) (("" (inst -1 "range!1-i!1") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing reverse_condition_TCC4 0 (reverse_condition_TCC4-1 nil 3757864703 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing reverse_condition_TCC3 0 (reverse_condition_TCC3-1 nil 3757841257 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing reverse_condition_TCC2 0 (reverse_condition_TCC2-1 nil 3757841257 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing reverse_condition_TCC1 0 (reverse_condition_TCC1-1 nil 3757841257 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing forall_test 0 (forall_test-1 nil 3757840525 ("" (skolem!) (("" (flatten) (("" (skolem!) (("" (inst -1 "n!1") nil nil)) nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) shostak))("bitstuffing" bitstuffing consable_modulo 0 (consable_modulo-1 nil 3757864730 ("" (skolem!) (("" (flatten) (("" (skolem!) (("" (inst -1 "i!1") (("" (case "n!1=0") (("1" (assert) (("1" (expand "mod") (("1" (assert) (("1" (rewrite -1) (("1" (assert) (("1" (smash) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing consable_modulo_TCC4 0 (consable_modulo_TCC4-1 nil 3757864703 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing consable_modulo_TCC3 0 (consable_modulo_TCC3-1 nil 3757864703 ("" (subtype-tcc) nil nil) ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing consable_modulo_TCC2 0 (consable_modulo_TCC2-1 nil 3757864703 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing consable_modulo_TCC1 0 (consable_modulo_TCC1-1 nil 3757864703 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing consable_cons 0 (consable_cons-1 nil 3757865554 ("" (skolem!) (("" (assert) (("" (flatten) (("" (skolem!) (("" (lemma "cons_get") (("" (inst -2 "i!1-1") (("1" (inst -1 "head!1" "tail!1" "i!1-1") (("1" (replace -1 -2) (("1" (hide -1) (("1" (lemma "cons_get") (("1" (inst -1 "head!1" "tail!1" "0") (("1" (replace -1 -2) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (lemma "cons_length") (("2" (inst -1 "head!1" "tail!1") (("2" (assert) (("2" (typepred "i!1") (("2" (assert) (("2" (replace -3 -2) (("2" (assert) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing consable_cons_TCC4 0 (consable_cons_TCC4-1 nil 3757865532 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing consable_cons_TCC3 0 (consable_cons_TCC3-1 nil 3757865532 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing consable_cons_TCC2 0 (consable_cons_TCC2-1 nil 3757865532 ("" (subtype-tcc) nil nil) ((single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing consable_cons_TCC1 0 (consable_cons_TCC1-1 nil 3757865532 ("" (subtype-tcc) nil nil) ((single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing cons_stuffed_TCC3 0 (cons_stuffed_TCC3-1 nil 3757908612 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing induct_test 0 (induct_test-1 nil 3757923317 ("" (induct "x") (("1" (expand "id") (("1" (propax) nil nil)) nil) ("2" (skolem!) (("2" (flatten) (("2" (expand "id" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ((nat_induction formula-decl nil naturalnumbers nil) (id def-decl "nat" bitstuffing nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("bitstuffing" bitstuffing id_TCC2 0 (id_TCC2-1 nil 3757923300 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing id_TCC1 0 (id_TCC1-1 nil 3757923300 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing test 0 (test-1 nil 3757913744 ("" (skolem!) (("" (expand "stuffed?") (("" (typepred "s!1") (("" (expand "stuffed?") (("" (propax) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (stuffed? const-decl "bool" bitstuffing nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil)) shostak))("bitstuffing" bitstuffing exact_between 0 (exact_between-1 nil 3757952823 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) shostak))("bitstuffing" bitstuffing only_zero 0 (only_zero-1 nil 3757953230 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak))("bitstuffing" bitstuffing induct_test_2 0 (induct_test_2-1 nil 3757924489 ("" (measure-induct+ "seq`length" "seq") (("" (skolem!) (("" (inst -1 "tail(x!1)") (("" (lemma "tail_length") (("" (inst -1 "x!1") (("" (replace -1 -2) (("" (hide -1) (("" (assert) (("" (lemma "tail_get") (("" (inst -2 "i!1-1") (("1" (inst -1 "x!1" "i!1") (("1" (replace -1 -2 :dir rl) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (fix_seq type-eq-decl nil bitstuffing nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (cons_length formula-decl nil bitstuffing nil) (FALSE const-decl "bool" booleans nil) (stuff def-decl "min_seq(s`length)" bitstuffing nil) (min_stuffed type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (wf_nat formula-decl nil naturalnumbers nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (bit_seq type-eq-decl nil bitstuffing nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (measure_induction formula-decl nil measure_induction nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil)) shostak))("bitstuffing" bitstuffing induct_test_1 0 (induct_test_1-1 nil 3757957098 ("" (measure-induct+ "seq`length" "seq") (("" (inst -1 "tail(x!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (fix_seq type-eq-decl nil bitstuffing nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (x!1 skolem-const-decl "min_seq(1)" bitstuffing nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (int_minus_int_is_int application-judgement "int" integers nil) (len def-decl "nat" bitstuffing nil) (= const-decl "[T, T -> boolean]" equalities nil) (wf_nat formula-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (min_seq type-eq-decl nil bitstuffing nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (bit_seq type-eq-decl nil bitstuffing nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (measure_induction formula-decl nil measure_induction nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil)) shostak))("bitstuffing" bitstuffing len_TCC2 0 (len_TCC2-1 nil 3757957627 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing len_TCC1 0 (len_TCC1-1 nil 3757957098 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)) nil))("bitstuffing" bitstuffing get_i_tail 0 (get_i_tail-1 nil 3757948766 ("" (skolem!) (("" (typepred "seq!1") (("" (expand "get_i") (("" (lemma "tail_length") (("" (inst -1 "seq!1") (("" (replace -1 1 :dir lr) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing get_i_tail_TCC2 0 (get_i_tail_TCC2-1 nil 3757949617 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_tail_TCC1 0 (get_i_tail_TCC1-1 nil 3757948748 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_TCC4 0 (get_i_TCC4-1 nil 3757946267 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_TCC3 0 (get_i_TCC3-1 nil 3757946267 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_TCC2 0 (get_i_TCC2-1 nil 3757946267 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_TCC1 0 (get_i_TCC1-1 nil 3757946267 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3758000780 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3758000780 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3758000780 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3758000780 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3758000780 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_consable_TCC4 0 (stuff_consable_TCC4-1 nil 3757998477 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing stuff_TCC11 0 (stuff_TCC11-1 nil 3757689837 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_consable 0 (stuff_consable-1 nil 3757921860 ("" (measure-induct+ "s`length" "s" :order ">") (("1" (skosimp) (("1" (inst -1 "cons(FALSE, x!1)") (("1" (lemma "cons_length") (("1" (inst -1 "FALSE" "x!1") (("1" (replace -1 -2) (("1" (assert) (("1" (skosimp) (("1" (inst -2 "rep_count!1+1") (("1" (inst -2 "i!1+1") (("1" (lemma "cons_get") (("1" (inst -1 "FALSE" "x!1" "i!1") (("1" (replace -1 -3 :dir rl) (("1" (hide -1 -2) (("1" (lemma "cons_get") (("1" (inst -1 "FALSE" "x!1" "1+i!1") (("1" (replace -1 -2 :dir rl) (("1" (assert) (("1" (hide -1) (("1" (expand "stuff" -1) (("1" (case "1 + rep_count!1 >= MAX_REP") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) nil shostak))("bitstuffing" bitstuffing stuff_consable_TCC3 0 (stuff_consable_TCC3-1 nil 3757763723 ("" (subtype-tcc) nil nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing stuff_consable_TCC2 0 (stuff_consable_TCC2-1 nil 3757763723 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_consable_TCC1 0 (stuff_consable_TCC1-1 nil 3757763723 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing induct_test_2 0 (induct_test_2-1 nil 3758018197 ("" (assert) (("" (measure-induct "seq`length" "seq" :order ">") (("1" (skolem!) (("1" (flatten) (("1" (inst -1 "cons(FALSE, x!1)") (("1" (lemma "cons_length") (("1" (inst -1 "FALSE" "x!1") (("1" (replace -1 -2) (("1" (assert) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing filter_TCC5 0 (filter_TCC5-1 nil 3758018078 ("" (termination-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing filter_TCC4 0 (filter_TCC4-1 nil 3758018078 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing filter_TCC3 0 (filter_TCC3-1 nil 3758018078 ("" (termination-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing filter_TCC2 0 (filter_TCC2-1 nil 3758018078 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing filter_TCC1 0 (filter_TCC1-1 nil 3758018078 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing induct_test_1 0 (induct_test_1-1 nil 3758017030 ("" (measure-induct+ "seq`length" "seq" :order ">") (("1" (inst -1 "cons(FALSE, x!1)") (("1" (lemma "cons_length") (("1" (inst -1 "FALSE" "x!1") (("1" (replace -1 -2) (("1" (assert) (("1" (expand "len" -2) (("1" (lemma "tail_cons") (("1" (inst -1 "FALSE" "x!1") (("1" (replace -1 -3 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "cons_length") (("2" (inst -1 "FALSE" "x!1") (("2" (replace -1 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "well_founded?") (("2" (postpone) nil nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing len_TCC2 0 (len_TCC2-1 nil 3758017029 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing len_TCC1 0 (len_TCC1-1 nil 3758017029 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)) nil))("bitstuffing" bitstuffing tail_cons 0 (tail_cons-1 nil 3757950917 ("" (skosimp) (("" (expand "tail") (("" (lemma "cons_length") (("" (inst -1 "head!1" "tail!1") (("" (replace -1 1) (("" (expand "cons") (("" (hide -1) (("" (expand "single") (("" (assert) (("" (expand "o") (("" (expand "^^") (("" (assert) (("" (smash) (("1" (grind) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing tail_cons_TCC1 0 (tail_cons_TCC1-1 nil 3757950830 ("" (subtype-tcc) nil nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuffed_correct 0 (stuffed_correct-1 nil 3758015368 ("" (measure-induct+ "s`length" "s") (("" (postpone) nil nil)) nil) nil shostak))("bitstuffing" bitstuffing stuffed_correct_TCC1 0 (stuffed_correct_TCC1-1 nil 3762079370 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing cons_consable 0 (cons_consable-1 nil 3758010324 ("" (skolem!) (("" (expand "consable?") (("" (lemma "cons_length") (("" (copy -1) (("" (inst -1 "head!1" "tail!1") (("" (inst -2 "NOT head!1" "cons(head!1, tail!1)") (("" (replace -1 -2) (("" (replace -2 1) (("" (assert) (("" (case "2 + tail!1`length < MAX_REP") (("1" (assert) nil nil) ("2" (flatten) (("2" (assert) (("2" (inst -3 "0") (("2" (assert) (("2" (lemma "cons_first") (("2" (inst -1 "NOT head!1" "cons(head!1, tail!1)") (("2" (replace -1 -4 :dir rl) (("2" (lemma cons_get) (("2" (inst -1 "NOT head!1" " cons(head!1, tail!1)" "0") (("2" (replace -1 -5 :dir rl) (("2" (hide -1 -2) (("2" (lemma "cons_first") (("2" (inst -1 "head!1" "tail!1") (("2" (replace -1 -4 :dir rl) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((cons_length formula-decl nil bitstuffing nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bit type-eq-decl nil bit nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (between type-eq-decl nil bitstuffing nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (cons_first formula-decl nil bitstuffing nil) (odd_minus_even_is_odd application-judgement "odd_int" integers nil) (cons_get formula-decl nil bitstuffing nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) nil (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (fix_seq type-eq-decl nil bitstuffing nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (consable? const-decl "bool" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("bitstuffing" bitstuffing consable_stuffed 0 (consable_stuffed-1 nil 3757763881 ("" (skolem!) (("" (typepred "s!1") (("" (expand "consable?") (("" (expand "stuffed?" 1) (("" (expand "stuffed?") (("" (split) (("1" (split) (("1" (flatten) (("1" (lemma "cons_length") (("1" (inst -1 "b!1" "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lemma "cons_length") (("2" (inst -1 "b!1" "s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (split) (("1" (lemma "cons_length") (("1" (inst -1 "b!1" "s!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "cons_length") (("2" (inst -1 "b!1" "s!1") (("2" (assert) (("2" (replace -1 3) (("2" (assert) (("2" (field) (("2" (skolem!) (("2" (skolem!) (("2" (inst -2 "i!1+1") (("2" (lemma "cons_get") (("2" (inst -1 "b!1" "s!1" "i!1") (("2" (replace -1 1) (("2" (hide -1) (("2" (lemma "cons_get") (("2" (inst -1 "b!1" "s!1" "1+i!1") (("2" (replace -1 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (lemma "cons_length") (("1" (inst -1 "b!1" "s!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (case "start!1=0") (("1" (skolem!) (("1" (inst -2 "i!1+1") (("1" (lemma "cons_get") (("1" (inst -1 "b!1" "s!1" "i!1") (("1" (replace -1 1) (("1" (hide -1) (("1" (lemma "cons_get") (("1" (inst -1 "b!1" "s!1" "i!1+1") (("1" (replace -1 1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (inst -3 "start!1-1") (("1" (skolem! 2) (("1" (inst -1 "i!1+1") (("1" (lemma "cons_get") (("1" (inst -1 "b!1" "s!1" "i!1") (("1" (replace -1 2) (("1" (hide -1) (("1" (lemma "cons_get") (("1" (inst -1 "b!1" "s!1" "i!1+1") (("1" (replace -1 2) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (field) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((stuffed_consable type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (consable? const-decl "bool" bitstuffing nil) (bit_seq type-eq-decl nil bitstuffing nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (cons_length formula-decl nil bitstuffing nil) (int_plus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fix_seq type-eq-decl nil bitstuffing nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posint nonempty-type-eq-decl nil integers nil) nil (below type-eq-decl nil naturalnumbers nil) (between type-eq-decl nil bitstuffing nil) (cons_get formula-decl nil bitstuffing nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("bitstuffing" bitstuffing consable?_TCC2 0 (consable?_TCC2-1 nil 3757763723 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (between type-eq-decl nil bitstuffing nil) (MAX_ONES const-decl "above(0)" bitstuffing nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("bitstuffing" bitstuffing consable?_TCC1 0 (consable?_TCC1-1 nil 3757763723 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (between type-eq-decl nil bitstuffing nil) (MAX_ONES const-decl "above(0)" bitstuffing nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil))("bitstuffing" bitstuffing equals_test 0 (equals_test-1 nil 3762161144 ("" (propax) nil nil) nil shostak))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762320087 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762320087 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762320087 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762320087 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762320087 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762320087 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762324619 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762324619 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762324619 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762324619 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762324619 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762324619 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_TCC10 0 (stuff_TCC10-1 nil 3757689837 ("" (skosimp) (("" (skosimp) (("" (grind) nil nil)) nil)) nil) ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_TCC9 0 (stuff_TCC9-1 nil 3757689837 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (single const-decl "fix_seq(1)" bitstuffing nil) (O const-decl "finseq" finite_sequences nil) (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_TCC8 0 (stuff_TCC8-1 nil 3757689837 ("" (skosimp) (("" (skosimp) (("" (assert) nil nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC7 0 (stuff_TCC7-1 nil 3757507775 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC6 0 (stuff_TCC6-1 nil 3757507775 ("" (skosimp) (("" (assert) nil nil)) nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762408935 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762408935 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762408935 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762408935 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762408935 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762408935 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762408935 ("" (skosimp) (("" (typepred "s!1") (("" (typepred "stuff(s!1, x!1)") (("" (assert) nil nil)) nil)) nil)) nil) ((min_seq type-eq-decl nil bitstuffing nil) (bit_seq type-eq-decl nil bitstuffing nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (stuff def-decl "min_seq(s`length)" bitstuffing nil)) nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762416453 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762416453 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762416453 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762416453 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762416453 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762416453 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762417889 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing stuff_TCC10 0 (stuff_TCC10-1 nil 3762417889 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC9 0 (stuff_TCC9-1 nil 3762417889 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_TCC8 0 (stuff_TCC8-1 nil 3762417889 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing stuff_TCC7 0 (stuff_TCC7-1 nil 3762417889 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing stuff_TCC6 0 (stuff_TCC6-1 nil 3762417889 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762421578 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762421578 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762421578 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762421578 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762421578 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762421578 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762421578 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing cons_tail_TCC2 0 (cons_tail_TCC2-1 nil 3762403671 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing cons_tail_TCC1 0 (cons_tail_TCC1-1 nil 3762403671 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762516452 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762516452 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762516452 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762516452 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762516452 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762516452 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762516452 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762531403 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762531403 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762531403 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762531403 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762531403 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762531403 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762531403 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762532032 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762532032 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762532032 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762532032 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762532032 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762532032 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762532032 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762695577 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762695577 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762695577 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762695577 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762695577 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762695577 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762695577 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762702200 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762702200 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762702200 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762702200 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762702200 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762702200 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762702200 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_ones 0 (stuff_first_ones-1 nil 3762529634 ("" (measure-induct+ "s`length" "s") (("" (case "x!1=empty_seq") (("1" (grind) nil nil) ("2" (inst -1 "tail(x!1)") (("1" (lemma "tail_length") (("1" (inst -1 "x!1") (("1" (replace -1 -2) (("1" (assert) (("1" (hide -1) (("1" (skosimp) (("1" (expand "stuff" 2) (("1" (case "first_ones!1 >= MAX_ONES - 1 AND finseq_appl[boolean](x!1)(0)") (("1" (replace -1 2) (("1" (assert) (("1" (case "tail(x!1)=empty_seq") (("1" (replace -1 2) (("1" (assert) (("1" (expand "stuff" 2) (("1" (assert) (("1" (expand "empty_seq" 2) (("1" (assert) (("1" (grind 2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "0") (("2" (lemma "forall_empty") (("2" (assert) (("2" (flatten) (("2" (split) (("1" (lemma "cons_true_false") (("1" (inst -1 "stuff(tail(x!1), 0)") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (skolem!) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace 1 3) (("2" (assert) (("2" (case "finseq_appl[boolean](x!1)(0)") (("1" (assert) (("1" (inst -2 "first_ones!1-1") (("1" (split) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing stuff_first_ones_TCC1 0 (stuff_first_ones_TCC1-1 nil 3762528963 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_TCC4 0 (get_i_TCC4-1 nil 3762708663 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing well_founded_rev 0 (well_founded_rev-1 nil 3762329876 ("" (skosimp) (("" (expand "well_founded?") (("" (skolem 1 "set!1") (("" (inst -1 "set!1") (("" (flatten) (("" (split) (("1" (skolem -2 "some!1") (("1" (skolem -1 "min!1") (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing pred_max_spec 0 (pred_max_spec-1 nil 3762324695 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak))("bitstuffing" bitstuffing pred_max_TCC1 0 (pred_max_TCC1-1 nil 3762320087 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762836070 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762836070 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762836070 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762836070 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762836070 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762836070 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762836070 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing get_i_TCC4 0 (get_i_TCC4-1 nil 3762836070 ("" (termination-tcc) nil nil) nil nil))("bitstuffing" bitstuffing stuff_creates_one 0 (stuff_creates_one-1 nil 3762695578 ("" (skosimp) (("" (measure-induct+ "s`length" "s") (("" (inst -1 "tail(x!1)") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("bitstuffing" bitstuffing stuff_creates_one_TCC1 0 (stuff_creates_one_TCC1-1 nil 3762708663 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC10 0 (unstuff_TCC10-1 nil 3762854916 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC9 0 (unstuff_TCC9-1 nil 3762854916 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_TCC8 0 (unstuff_TCC8-1 nil 3762854916 ("" (subtype-tcc) nil nil) nil nil))("bitstuffing" bitstuffing unstuff_TCC7 0 (unstuff_TCC7-1 nil 3762854916 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC6 0 (unstuff_TCC6-1 nil 3762854916 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)) nil))("bitstuffing" bitstuffing unstuff_TCC5 0 (unstuff_TCC5-1 nil 3762854916 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (stuffed? const-decl "bool" bitstuffing nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("bitstuffing" bitstuffing stuff_first_TCC2 0 (stuff_first_TCC2-1 nil 3762854916 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("bitstuffing" bitstuffing get_i_TCC4 0 (get_i_TCC4-1 nil 3762854916 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bit_seq type-eq-decl nil bitstuffing nil) (min_seq type-eq-decl nil bitstuffing nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (empty_seq const-decl "finseq" finite_sequences nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (^^ const-decl "finseq" finite_sequences nil) (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("bitstuffing" bitstuffing unstuff_first_TCC3 0 (unstuff_first_TCC3-1 nil 3762860365 ("" (subtype-tcc) nil nil) nil nil))