(bitstuffing
 (seq_eq_TCC1 0
  (seq_eq_TCC1-1 nil 3762161794 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (not_empty_len 0
  (not_empty_len-1 nil 3762416454
   ("" (lemma "zero_len")
    (("" (skosimp) (("" (inst -1 "s!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (zero_len formula-decl nil bitstuffing nil))
   shostak))
 (stuffed?_TCC1 0
  (stuffed?_TCC1-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (stuffed?_TCC2 0
  (stuffed?_TCC2-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (tail_TCC1 0
  (tail_TCC1-1 nil 3757505893 ("" (subtype-tcc) nil nil) nil nil))
 (tail_TCC2 0
  (tail_TCC2-1 nil 3757505893
   ("" (skosimp)
    (("" (rewrite "^^")
      (("" (smash)
        (("1" (expand "empty_seq") (("1" (assert) nil nil)) nil)
         ("2" (expand "min") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((^^ const-decl "finseq" finite_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_TCC1 0
  (cons_TCC1-1 nil 3757507775 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_first_TCC1 0
  (cons_first_TCC1-1 nil 3757689456 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_first 0
  (cons_first-1 nil 3757689457
   ("" (skolem!)
    (("" (expand "cons")
      (("" (assert)
        (("" (expand "finseq_appl")
          (("" (expand "o")
            (("" (expand "single") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_first_tail_TCC1 0
  (cons_first_tail_TCC1-1 nil 3757689669 ("" (subtype-tcc) nil nil) nil
   nil))
 (cons_first_tail_TCC2 0
  (cons_first_tail_TCC2-1 nil 3757689669 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_first_tail 0
  (cons_first_tail-1 nil 3757689671
   ("" (skolem!)
    (("" (expand "finseq_appl")
      (("" (expand "cons")
        (("" (expand "o")
          (("" (expand "single") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil))
   shostak))
 (cons_length 0
  (cons_length-1 nil 3757737163
   ("" (skolem!)
    (("" (expand "cons")
      (("" (expand "single")
        (("" (assert) (("" (expand "o") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (single const-decl "fix_seq(1)" bitstuffing nil))
   shostak))
 (cons_get_TCC1 0
  (cons_get_TCC1-1 nil 3757737893 ("" (subtype-tcc) nil nil) nil nil))
 (cons_get_TCC2 0
  (cons_get_TCC2-1 nil 3757737893 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_get 0
  (cons_get-1 nil 3757737894
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand "finseq_appl")
        (("" (assert)
          (("" (expand "cons")
            (("" (assert)
              (("" (expand "single")
                (("" (expand "o") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cons_get_2_TCC1 0
  (cons_get_2_TCC1-1 nil 3757863560 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_get_2_TCC2 0
  (cons_get_2_TCC2-1 nil 3757863560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cons_get_2 0
  (cons_get_2-1 nil 3757863567
   ("" (skolem!)
    (("" (case "i!1=0")
      (("1" (assert)
        (("1" (expand "cons")
          (("1" (expand "single")
            (("1" (assert)
              (("1" (expand "finseq_appl")
                (("1" (assert)
                  (("1" (expand "o") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "cons")
        (("2" (expand "single")
          (("2" (assert)
            (("2" (expand "o")
              (("2" (assert)
                (("2" (expand "finseq_appl") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (tail_length 0
  (tail_length-1 nil 3757946817 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (tail_get_TCC1 0
  (tail_get_TCC1-1 nil 3757947498 ("" (subtype-tcc) nil nil) nil nil))
 (tail_get_TCC2 0
  (tail_get_TCC2-1 nil 3757947498 ("" (subtype-tcc) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (tail_get_TCC3 0
  (tail_get_TCC3-1 nil 3757947498 ("" (subtype-tcc) nil nil) nil nil))
 (tail_get 0
  (tail_get-1 nil 3757947515 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (tail_cons_TCC1 0
  (tail_cons_TCC1-1 nil 3762159616 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (tail_cons 0
  (tail_cons-1 nil 3762159617
   ("" (skosimp)
    (("" (grind)
      (("1" (lemma "zero_eq")
        (("1"
          (inst -1
           "(# length := 0, seq := (LAMBDA (x: below[0]): epsilon! (t: bool): TRUE) #)"
           "tail!1")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "seq_eq")
        (("2"
          (inst -1
           "(# length := tail!1`length, seq := LAMBDA (x: below[tail!1`length]): tail!1`seq(x) #)"
           "tail!1")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (FALSE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_eq formula-decl nil bitstuffing nil)
    (< const-decl "bool" reals nil)
    (seq_eq formula-decl nil bitstuffing nil))
   shostak))
 (cons_tail 0
  (cons_tail-1 nil 3762403671
   ("" (lemma "seq_eq")
    (("" (skosimp)
      ((""
        (inst -1 "s!1" "cons(finseq_appl[boolean](s!1)(0), tail(s!1))")
        (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq_eq formula-decl nil bitstuffing nil))
   shostak))
 (cons_smaller 0
  (cons_smaller-1 nil 3757588142
   ("" (skolem!)
    (("" (flatten)
      (("" (expand "stuffed?") (("" (smash) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_zero 0
  (cons_zero-1 nil 3762144129
   ("" (skosimp)
    (("" (typepred "tail!1")
      (("" (expand "stuffed?")
        (("" (skosimp)
          (("" (split)
            (("1" (split)
              (("1" (lemma "cons_length")
                (("1" (inst -1 "head!1" "tail!1")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (skolem!)
                (("2" (inst -1 "0")
                  (("1" (lemma "cons_first")
                    (("1" (inst -1 "head!1" "tail!1")
                      (("1" (replace -1 -2 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred "start!1")
                    (("2" (lemma "cons_length")
                      (("2" (inst -1 "head!1" "tail!1")
                        (("2" (replace -1 -2) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (split)
                (("1" (assert) nil nil)
                 ("2" (skosimp)
                  (("2" (case "start!1=0")
                    (("1" (inst -2 "0")
                      (("1" (lemma "cons_first")
                        (("1" (inst -1 "head!1" "tail!1")
                          (("1" (replace -1 -3 :dir rl)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -3 "start!1-1")
                      (("1" (skosimp)
                        (("1" (inst -1 "i!1+1")
                          (("1" (lemma "cons_get")
                            (("1" (inst -1 "head!1" "tail!1" "i!1")
                              (("1"
                                (replace -1 -2 :dir rl)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "cons_get")
                                    (("1"
                                      (inst
                                       -1
                                       "head!1"
                                       "tail!1"
                                       "i!1+1")
                                      (("1"
                                        (replace -1 -2 :dir rl)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stuffed? const-decl "bool" bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i!1 skolem-const-decl
     "between(start!1 - 1, MAX_ONES - 2 + start!1)" bitstuffing nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (cons_get formula-decl nil bitstuffing nil)
    (start!1 skolem-const-decl
     "below(cons(head!1, tail!1)`length - MAX_ONES)" bitstuffing nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons_length formula-decl nil bitstuffing nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (start!1 skolem-const-decl
     "below(cons(head!1, tail!1)`length - MAX_ONES)" bitstuffing nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (tail!1 skolem-const-decl "(stuffed?)" bitstuffing nil)
    (head!1 skolem-const-decl "bool" bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (between type-eq-decl nil bitstuffing nil)
    (cons_first formula-decl nil bitstuffing nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_zero_alt 0
  (cons_zero_alt-1 nil 3762163750
   ("" (skosimp)
    (("" (lemma "cons_zero")
      (("" (inst -1 "head!1" "tail!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((cons_zero formula-decl nil bitstuffing nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (tail!1 skolem-const-decl "bit_seq" bitstuffing nil))
   shostak))
 (cons_true_false 0
  (cons_true_false-1 nil 3762418153
   ("" (lemma "cons_zero")
    (("" (skosimp)
      (("" (inst -1 "FALSE" "s!1")
        (("" (expand "stuffed?" 1)
          (("" (assert)
            (("" (flatten)
              (("" (split)
                (("1" (assert) nil nil)
                 ("2" (skosimp)
                  (("2" (inst -1 0)
                    (("1" (lemma "cons_first")
                      (("1" (inst -1 "TRUE" "cons(FALSE, s!1)")
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind)
                      (("1" (grind)
                        (("1" (typepred "s!1`length")
                          (("1" (assert)
                            (("1" (grind) (("1" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil)
                       ("3" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (tail_stuffed 0
  (tail_stuffed-1 nil 3762164427
   ("" (skosimp)
    (("" (expand "stuffed?")
      (("" (flatten)
        (("" (split)
          (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (inst -1 "start!1+1")
                (("2" (skosimp)
                  (("2" (lemma "tail_get")
                    (("2" (inst -2 "i!1-1")
                      (("2" (inst -1 "s!1" "i!1")
                        (("2" (replace -1 -2 :dir rl)
                          (("2" (lemma "tail_get")
                            (("2" (inst -1 "s!1" "i!1+1")
                              (("1"
                                (replace -1 -3 :dir rl)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (between type-eq-decl nil bitstuffing nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (s!1 skolem-const-decl "min_seq(1)" bitstuffing nil)
    (start!1 skolem-const-decl "below(tail(s!1)`length - MAX_ONES)"
     bitstuffing nil)
    (i!1 skolem-const-decl "between(1 + start!1, MAX_ONES + start!1)"
     bitstuffing nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (tail_get formula-decl nil bitstuffing nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (stuff_TCC1 0
  (stuff_TCC1-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (stuff_TCC2 0
  (stuff_TCC2-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (stuff_TCC3 0
  (stuff_TCC3-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC4 0
  (stuff_TCC4-1 nil 3757503693 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (stuff_TCC5 0
  (stuff_TCC5-1 nil 3757503693
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (stuff_TCC6 0
  (stuff_TCC6-1 nil 3762423238 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC7 0
  (stuff_TCC7-1 nil 3762423238 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC8 0
  (stuff_TCC8-1 nil 3762423238 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (stuff_TCC9 0
  (stuff_TCC9-1 nil 3762423238
   ("" (skosimp) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC10 0
  (stuff_TCC10-1 nil 3762423238 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (below_empty 0
  (below_empty-1 nil 3762531956 ("" (grind) nil nil) nil shostak))
 (forall_empty 0
  (forall_empty-1 nil 3762531404 ("" (grind) nil nil) nil shostak))
 (stuff_creates_one_simple_TCC1 0
  (stuff_creates_one_simple_TCC1-1 nil 3762845861
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (stuff_creates_one_simple_TCC2 0
  (stuff_creates_one_simple_TCC2-1 nil 3762845861
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (stuff_creates_one_simple 0
  (stuff_creates_one_simple-1 nil 3762845862
   ("" (induct "i")
    (("1" (skolem!)
      (("1" (assert) (("1" (inst -1 "s!1") nil nil)) nil)) nil)
     ("2" (typepred "MAX_ONES")
      (("2" (assert)
        (("2" (skosimp)
          (("2" (expand "stuff")
            (("2" (case "finseq_appl[boolean](s!1)(0)")
              (("1" (assert)
                (("1" (inst 1 "1") (("1" (grind) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (inst 2 "0") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (expand "stuff" 1)
          (("3" (case "finseq_appl[boolean](s!1)(0)")
            (("1" (assert)
              (("1" (inst -3 "tail(s!1)")
                (("1" (skosimp)
                  (("1" (inst 2 "i!1+1")
                    (("1" (lemma "cons_get")
                      (("1"
                        (inst -1 "TRUE"
                         "stuff(tail(s!1), MAX_ONES -1 -jb!1)" "i!1")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "s!1") (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (inst 2 "0")
                (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skosimp)
        (("4" (skosimp)
          (("4" (skosimp)
            (("4" (skosimp)
              (("4" (typepred "res!1") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp) (("5" (skosimp) (("5" (assert) nil nil)) nil))
      nil))
    nil)
   ((cons_get formula-decl nil bitstuffing nil)
    (TRUE const-decl "bool" booleans nil)
    (between type-eq-decl nil bitstuffing nil)
    (i!1 skolem-const-decl "below(2 + jb!1)" bitstuffing nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (s!1 skolem-const-decl "min_seq(3 + jb!1)" bitstuffing nil)
    (jb!1 skolem-const-decl "below(MAX_ONES)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (stuff def-decl "min_seq(s`length)" bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (stuff_one_count_inc 0
  (stuff_one_count_inc-1 nil 3762861840
   ("" (skosimp)
    (("" (expand "stuffed?")
      (("" (grind)
        (("1" (typepred "stuff(s!1, 1)")
          (("1" (assert) (("1" (grind) (("1" (postpone) nil nil)) nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
         ("6" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (stuff_param 0
  (stuff_param-1 nil 3762420941
   ("" (skosimp)
    (("" (case "stuff(s!1, 1)`length < MAX_ONES")
      (("1" (expand "stuffed?" 1)
        (("1" (assert)
          (("1" (lemma "cons_length")
            (("1" (inst -1 "TRUE" "stuff(s!1,1)")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "stuff_creates_one_simple")
        (("2" (inst -1 "MAX_ONES-2" "s!1")
          (("1" (assert)
            (("1" (expand "stuffed?" 2)
              (("1" (assert)
                (("1" (skolem!)
                  (("1" (skosimp)
                    (("1" (case "start!1=0")
                      (("1" (assert)
                        (("1" (lemma "cons_get")
                          (("1" (inst -1 "TRUE" "stuff(s!1,1)" "i!1")
                            (("1" (replace -1 1)
                              (("1"
                                (inst -4 "i!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "stuff_one_count_inc")
                        (("2" (inst -1 "s!1")
                          (("2" (assert)
                            (("2" (expand "stuffed?" -1)
                              (("2"
                                (inst -1 "start!1-1")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (lemma "cons_get")
                                    (("2"
                                      (inst
                                       -1
                                       "TRUE"
                                       "stuff(s!1,1)"
                                       "i!2")
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (lemma "cons_get")
                                            (("2"
                                              (inst
                                               -1
                                               "TRUE"
                                               "stuff(s!1,1)"
                                               "i!2+1")
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (inst -3 "i!2+1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "stuff_param_helper")
            (("2" (inst -1 "s!1") (("2" (assert) nil nil)) nil)) nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((MAX_ONES const-decl "above(1)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (stuff def-decl "min_seq(s`length)" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons_length formula-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s!1 skolem-const-decl "bit_seq" bitstuffing nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (cons_get formula-decl nil bitstuffing nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (between type-eq-decl nil bitstuffing nil)
    (stuff_one_count_inc formula-decl nil bitstuffing nil)
    (stuff_param_helper formula-decl nil bitstuffing nil)
    (stuff_creates_one_simple formula-decl nil bitstuffing nil))
   shostak))
 (stuff_first_TCC1 0
  (stuff_first_TCC1-1 nil 3762408935 ("" (subtype-tcc) nil nil) nil
   nil))
 (stuff_first_TCC2 0
  (stuff_first_TCC2-1 nil 3762954253 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (stuff_first 0
  (stuff_first-1 nil 3762409016
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (stuff def-decl "min_seq(s`length)" bitstuffing nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil))
   shostak))
 (stuff_works 0
  (stuff_works-1 nil 3758001569
   ("" (measure-induct+ "s`length" "s")
    (("" (case "x!1=empty_seq")
      (("1" (grind) nil nil)
       ("2" (inst -1 "tail(x!1)")
        (("1" (lemma "tail_length")
          (("1" (inst -1 "x!1")
            (("1" (replace -1 -2)
              (("1" (assert)
                (("1" (hide -1)
                  (("1" (expand "stuff" 2)
                    (("1" (assert)
                      (("1"
                        (case "0 >= MAX_ONES - 1 AND finseq_appl[boolean](x!1)(0)")
                        (("1" (replace -1 2)
                          (("1" (lemma "cons_true_false")
                            (("1" (inst -1 "stuff(tail(x!1), 0)")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (replace 1 3)
                          (("2" (case "finseq_appl[boolean](x!1)(0)")
                            (("1" (assert)
                              (("1"
                                (lemma "stuff_param")
                                (("1"
                                  (inst -1 "tail(x!1)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "cons_zero")
                                (("2"
                                  (inst
                                   -1
                                   "FALSE"
                                   "stuff(tail(x!1), 0)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "not_empty_len")
              (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "not_empty_len")
          (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (tail_length formula-decl nil bitstuffing nil)
    (not_empty_len formula-decl nil bitstuffing nil)
    (FALSE const-decl "bool" booleans nil)
    (cons_zero formula-decl nil bitstuffing nil)
    (stuff_param formula-decl nil bitstuffing nil)
    (cons_true_false formula-decl nil bitstuffing nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (x!1 skolem-const-decl "bit_seq" bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stuff def-decl "min_seq(s`length)" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (unstuff_tailable_TCC1 0
  (unstuff_tailable_TCC1-1 nil 3762954253 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (unstuff_tailable_TCC2 0
  (unstuff_tailable_TCC2-1 nil 3762954253 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (unstuff_TCC1 0
  (unstuff_TCC1-1 nil 3758000780
   ("" (lemma "unstuff_tailable")
    (("" (skosimp)
      (("" (inst -1 "s!1" "one_count!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unstuff_tailable formula-decl nil bitstuffing nil))
   nil))
 (unstuff_TCC2 0
  (unstuff_TCC2-1 nil 3758000780
   ("" (skosimp)
    (("" (lemma "tail_stuffed")
      (("" (inst -1 "s!1")
        (("" (assert)
          (("" (lemma "tail_stuffed")
            (("" (inst -1 "tail(s!1)") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tail_stuffed formula-decl nil bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (unstuff_TCC3 0
  (unstuff_TCC3-1 nil 3758000780
   ("" (skosimp)
    (("" (lemma "tail_length")
      (("" (inst -1 "s!1")
        (("" (lemma "tail_length")
          (("" (inst -1 "tail(s!1)")
            (("" (replace -2 -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((tail_length formula-decl nil bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (unstuff_TCC4 0
  (unstuff_TCC4-1 nil 3758000780
   ("" (skosimp)
    (("" (typepred "s!1")
      (("" (lemma "tail_stuffed")
        (("" (inst -1 "s!1")
          (("1" (assert)
            (("1" (lemma "tail_stuffed")
              (("1" (inst -1 "tail(s!1)")
                (("1" (assert) nil nil) ("2" (skosimp) nil nil)) nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (lemma "tail_stuffed")
              (("2" (inst -1 "s!1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stuffed? const-decl "bool" bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (s!1 skolem-const-decl "(stuffed?)" bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (tail_stuffed formula-decl nil bitstuffing nil))
   nil))
 (unstuff_TCC5 0
  (unstuff_TCC5-1 nil 3762954253 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (unstuff_TCC6 0
  (unstuff_TCC6-1 nil 3762954253
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "s!1")
        (("" (lemma "tail_stuffed")
          (("" (inst -1 "s!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((tail_stuffed formula-decl nil bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil))
   nil))
 (unstuff_TCC7 0
  (unstuff_TCC7-1 nil 3762954253 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (unstuff_TCC8 0
  (unstuff_TCC8-1 nil 3762954253 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (correct_helper_TCC1 0
  (correct_helper_TCC1-1 nil 3762859668
   ("" (lemma "stuff_works")
    (("" (skosimp) (("" (inst -1 "tail(s!1)") nil nil)) nil)) nil)
   ((tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (stuff_works formula-decl nil bitstuffing nil))
   nil))
 (correct_helper_TCC2 0
  (correct_helper_TCC2-1 nil 3762859668 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (correct_helper_TCC3 0
  (correct_helper_TCC3-1 nil 3762859668
   ("" (skosimp)
    (("" (lemma "stuff_works")
      (("" (typepred "s!1")
        (("" (inst -2 "s!1")
          (("" (lemma "tail_stuffed")
            (("" (inst -1 "stuff(s!1, 0)") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stuff_works formula-decl nil bitstuffing nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (stuff def-decl "min_seq(s`length)" bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tail_stuffed formula-decl nil bitstuffing nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil))
   nil))
 (correct_helper 0
  (correct_helper-1 nil 3762859670 ("" (postpone) nil nil) nil
   shostak))
 (correct_TCC1 0
  (correct_TCC1-1 nil 3762079370
   ("" (skosimp)
    (("" (lemma "stuff_works") (("" (inst -1 "s!1") nil nil)) nil))
    nil)
   ((stuff_works formula-decl nil bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (correct 0
  (correct-1 nil 3758013007
   ("" (measure-induct+ "s`length" "s")
    (("1" (case "x!1=empty_seq")
      (("1" (grind) nil nil)
       ("2" (inst -1 "tail(x!1)")
        (("1" (lemma "tail_length")
          (("1" (inst -1 "x!1")
            (("1" (replace -1 -2)
              (("1" (assert)
                (("1" (hide -1)
                  (("1" (expand "unstuff" 2)
                    (("1" (assert)
                      (("1"
                        (case "0 >= MAX_ONES - 1 AND finseq_appl[boolean](stuff(x!1, 0))(0)")
                        (("1" (replace -1 2)
                          (("1" (expand "stuff" 2)
                            (("1" (assert)
                              (("1"
                                (case
                                 "0 >= MAX_ONES - 1 AND finseq_appl[boolean](x!1)(0)")
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (lemma "tail_cons")
                                    (("1"
                                      (inst
                                       -1
                                       "TRUE"
                                       "cons(FALSE, stuff(tail(x!1), 0))")
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "tail_cons")
                                            (("1"
                                              (inst
                                               -1
                                               "FALSE"
                                               "stuff(tail(x!1), 0)")
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace
                                                     -6
                                                     2
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "cons_tail")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace 1 3)
                                  (("2"
                                    (lemma "tail_cons")
                                    (("2"
                                      (inst
                                       -1
                                       "finseq_appl[boolean](x!1)(0)"
                                       "stuff(tail(x!1),
                                                                                                                                                         IF finseq_appl[boolean](x!1)(0)
                                                                                                                                                         THEN 1
                                                                                                                                                         ELSE 0
                                                                                                                                                         ENDIF)")
                                      (("2"
                                        (replace -1 3)
                                        (("2"
                                          (case
                                           "finseq_appl[boolean](x!1)(0)")
                                          (("1"
                                            (replace -1 3)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "0 >= MAX_ONES - 1 AND finseq_appl[boolean](stuff(x!1, 0))(0)")
                          (("1" (propax) nil nil)
                           ("2" (replace 1 4)
                            (("2"
                              (case "finseq_appl[boolean](stuff(x!1, 0))(0)")
                              (("1"
                                (replace -1 4)
                                (("1"
                                  (lemma "correct_helper")
                                  (("1"
                                    (inst -1 "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 -3)
                                        (("1"
                                          (replace -3 4 :dir rl)
                                          (("1"
                                            (lemma "cons_tail")
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "stuff_first")
                                                  (("1"
                                                    (inst -1 "x!1" "0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "seq_eq")
                                  (("2"
                                    (expand "stuff" 5)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma "stuff_first")
                                          (("2"
                                            (inst -1 "x!1" "0")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "tail_cons")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "FALSE"
                                                   "stuff(tail(x!1), 0)")
                                                  (("2"
                                                    (replace -1 6)
                                                    (("2"
                                                      (replace
                                                       -2
                                                       6
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (lemma
                                                         "seq_eq")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1"
                                                           "cons(FALSE, tail(x!1))")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "cons_tail")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "stuff")
            (("2" (expand "unstuff")
              (("2" (assert)
                (("2" (expand "empty_seq")
                  (("2" (assert)
                    (("2" (grind)
                      (("2" (lemma "not_empty_len")
                        (("2" (inst -1 "x!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "stuff_works") (("2" (inst -1 "s!1") nil nil)) nil))
    nil)
   ((stuff_works formula-decl nil bitstuffing nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (not_empty_len formula-decl nil bitstuffing nil)
    (tail_length formula-decl nil bitstuffing nil)
    (correct_helper formula-decl nil bitstuffing nil)
    (stuff_first formula-decl nil bitstuffing nil)
    (cons_tail formula-decl nil bitstuffing nil)
    (seq_eq formula-decl nil bitstuffing nil)
    (FALSE const-decl "bool" booleans nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tail_cons formula-decl nil bitstuffing nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (MAX_ONES const-decl "above(1)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (x!1 skolem-const-decl "bit_seq" bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unstuff def-decl "bit_seq" bitstuffing nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (stuff def-decl "min_seq(s`length)" bitstuffing nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

