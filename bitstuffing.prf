(bitstuffing
 (seq_eq_TCC1 0
  (seq_eq_TCC1-1 nil 3762161794 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (stuffed?_TCC1 0
  (stuffed?_TCC1-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (stuffed?_TCC2 0
  (stuffed?_TCC2-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (tail_TCC1 0
  (tail_TCC1-1 nil 3757505893 ("" (subtype-tcc) nil nil) nil nil))
 (tail_TCC2 0
  (tail_TCC2-1 nil 3757505893
   ("" (skosimp)
    (("" (rewrite "^^")
      (("" (smash)
        (("1" (expand "empty_seq") (("1" (assert) nil nil)) nil)
         ("2" (expand "min") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((^^ const-decl "finseq" finite_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_TCC1 0
  (cons_TCC1-1 nil 3757507775 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_first_TCC1 0
  (cons_first_TCC1-1 nil 3757689456 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_first 0
  (cons_first-1 nil 3757689457
   ("" (skolem!)
    (("" (expand "cons")
      (("" (assert)
        (("" (expand "finseq_appl")
          (("" (expand "o")
            (("" (expand "single") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_first_tail_TCC1 0
  (cons_first_tail_TCC1-1 nil 3757689669 ("" (subtype-tcc) nil nil) nil
   nil))
 (cons_first_tail_TCC2 0
  (cons_first_tail_TCC2-1 nil 3757689669 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_first_tail 0
  (cons_first_tail-1 nil 3757689671
   ("" (skolem!)
    (("" (expand "finseq_appl")
      (("" (expand "cons")
        (("" (expand "o")
          (("" (expand "single") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil))
   shostak))
 (cons_length 0
  (cons_length-1 nil 3757737163
   ("" (skolem!)
    (("" (expand "cons")
      (("" (expand "single")
        (("" (assert) (("" (expand "o") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (single const-decl "fix_seq(1)" bitstuffing nil))
   shostak))
 (cons_get_TCC1 0
  (cons_get_TCC1-1 nil 3757737893 ("" (subtype-tcc) nil nil) nil nil))
 (cons_get_TCC2 0
  (cons_get_TCC2-1 nil 3757737893 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_get 0
  (cons_get-1 nil 3757737894
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand "finseq_appl")
        (("" (assert)
          (("" (expand "cons")
            (("" (assert)
              (("" (expand "single")
                (("" (expand "o") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cons_get_2_TCC1 0
  (cons_get_2_TCC1-1 nil 3757863560 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_get_2_TCC2 0
  (cons_get_2_TCC2-1 nil 3757863560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cons_get_2 0
  (cons_get_2-1 nil 3757863567
   ("" (skolem!)
    (("" (case "i!1=0")
      (("1" (assert)
        (("1" (expand "cons")
          (("1" (expand "single")
            (("1" (assert)
              (("1" (expand "finseq_appl")
                (("1" (assert)
                  (("1" (expand "o") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "cons")
        (("2" (expand "single")
          (("2" (assert)
            (("2" (expand "o")
              (("2" (assert)
                (("2" (expand "finseq_appl") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (tail_length 0
  (tail_length-1 nil 3757946817 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (tail_get_TCC1 0
  (tail_get_TCC1-1 nil 3757947498 ("" (subtype-tcc) nil nil) nil nil))
 (tail_get_TCC2 0
  (tail_get_TCC2-1 nil 3757947498 ("" (subtype-tcc) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (tail_get_TCC3 0
  (tail_get_TCC3-1 nil 3757947498 ("" (subtype-tcc) nil nil) nil nil))
 (tail_get 0
  (tail_get-1 nil 3757947515 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (tail_cons_TCC1 0
  (tail_cons_TCC1-1 nil 3762159616 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (tail_cons 0
  (tail_cons-1 nil 3762159617
   ("" (skosimp)
    (("" (grind)
      (("1" (lemma "zero_eq")
        (("1"
          (inst -1
           "(# length := 0, seq := (LAMBDA (x: below[0]): epsilon! (t: bool): TRUE) #)"
           "tail!1")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "seq_eq")
        (("2"
          (inst -1
           "(# length := tail!1`length, seq := LAMBDA (x: below[tail!1`length]): tail!1`seq(x) #)"
           "tail!1")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (FALSE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_eq formula-decl nil bitstuffing nil)
    (< const-decl "bool" reals nil)
    (seq_eq formula-decl nil bitstuffing nil))
   shostak))
 (cons_smaller 0
  (cons_smaller-1 nil 3757588142
   ("" (skolem!)
    (("" (flatten)
      (("" (expand "stuffed?") (("" (smash) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_stuffed_TCC1 0
  (cons_stuffed_TCC1-1 nil 3757736777 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_stuffed_TCC2 0
  (cons_stuffed_TCC2-1 nil 3757908612 ("" (subtype-tcc) nil nil)
   ((single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cons_stuffed 0
  (cons_stuffed-1 nil 3757736788
   ("" (skolem!)
    (("" (assert)
      (("" (flatten)
        (("" (typepred "tail!1")
          (("" (expand "stuffed?")
            (("" (skolem! 2)
              (("" (case "start!1=0")
                (("1" (skolem!)
                  (("1" (inst -4 "i!1") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "start!1")
                    (("2" (hide -1)
                      (("2" (inst -2 "start!1-1")
                        (("1" (skolem!)
                          (("1" (inst -2 "i!1+1")
                            (("1" (lemma "cons_get")
                              (("1"
                                (inst -1 "head!1" "tail!1" "i!1")
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "cons_get")
                                      (("1"
                                        (inst
                                         -1
                                         "head!1"
                                         "tail!1"
                                         "1+i!1")
                                        (("1"
                                          (replace -1 2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min_stuffed type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons_get formula-decl nil bitstuffing nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (between type-eq-decl nil bitstuffing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_xor_TCC1 0
  (cons_xor_TCC1-1 nil 3757689837 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (MAX_ONES const-decl "above(0)" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (min_stuffed type-eq-decl nil bitstuffing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (cons_xor 0
  (cons_xor-1 nil 3757588286
   ("" (skolem!)
    (("" (lemma "cons_stuffed")
      (("" (inst -1 "head!1" "tail!1")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (inst -1 1)
                (("1" (expand "XOR") (("1" (smash) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons_stuffed formula-decl nil bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (XOR const-decl "bool" xor_def nil)
    (min_stuffed type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (cons_zero 0
  (cons_zero-1 nil 3762144129
   ("" (skosimp)
    (("" (typepred "tail!1")
      (("" (expand "stuffed?")
        (("" (skosimp)
          (("" (split)
            (("1" (split)
              (("1" (lemma "cons_length")
                (("1" (inst -1 "head!1" "tail!1")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (skolem!)
                (("2" (inst -1 "0")
                  (("1" (lemma "cons_first")
                    (("1" (inst -1 "head!1" "tail!1")
                      (("1" (replace -1 -2 :dir rl)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred "start!1")
                    (("2" (lemma "cons_length")
                      (("2" (inst -1 "head!1" "tail!1")
                        (("2" (replace -1 -2) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (split)
                (("1" (assert) nil nil)
                 ("2" (skosimp)
                  (("2" (case "start!1=0")
                    (("1" (inst -2 "0")
                      (("1" (lemma "cons_first")
                        (("1" (inst -1 "head!1" "tail!1")
                          (("1" (replace -1 -3 :dir rl)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -3 "start!1-1")
                      (("1" (skosimp)
                        (("1" (inst -1 "i!1+1")
                          (("1" (lemma "cons_get")
                            (("1" (inst -1 "head!1" "tail!1" "i!1")
                              (("1"
                                (replace -1 -2 :dir rl)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "cons_get")
                                    (("1"
                                      (inst
                                       -1
                                       "head!1"
                                       "tail!1"
                                       "i!1+1")
                                      (("1"
                                        (replace -1 -2 :dir rl)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stuffed? const-decl "bool" bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (cons_get formula-decl nil bitstuffing nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons_length formula-decl nil bitstuffing nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MAX_ONES const-decl "above(0)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (between type-eq-decl nil bitstuffing nil)
    (cons_first formula-decl nil bitstuffing nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_zero_alt 0
  (cons_zero_alt-1 nil 3762163750
   ("" (skosimp)
    (("" (lemma "cons_zero")
      (("" (inst -1 "head!1" "tail!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((cons_zero formula-decl nil bitstuffing nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (stuffed? const-decl "bool" bitstuffing nil))
   shostak))
 (tail_stuffed 0
  (tail_stuffed-1 nil 3762164427
   ("" (skosimp)
    (("" (expand "stuffed?")
      (("" (flatten)
        (("" (split)
          (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (inst -1 "start!1+1")
                (("2" (skosimp)
                  (("2" (lemma "tail_get")
                    (("2" (inst -2 "i!1-1")
                      (("2" (inst -1 "s!1" "i!1")
                        (("2" (replace -1 -2 :dir rl)
                          (("2" (lemma "tail_get")
                            (("2" (inst -1 "s!1" "i!1+1")
                              (("1"
                                (replace -1 -3 :dir rl)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (stuffed? const-decl "bool" bitstuffing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (between type-eq-decl nil bitstuffing nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    nil nil nil
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (tail_get formula-decl nil bitstuffing nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (fix_seq type-eq-decl nil bitstuffing nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MAX_ONES const-decl "above(0)" bitstuffing nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (min_seq type-eq-decl nil bitstuffing nil)
    (bit_seq type-eq-decl nil bitstuffing nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (stuff_TCC1 0
  (stuff_TCC1-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (stuff_TCC2 0
  (stuff_TCC2-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (stuff_TCC3 0
  (stuff_TCC3-1 nil 3757503693 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC4 0
  (stuff_TCC4-1 nil 3757503693 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (stuff_TCC5 0
  (stuff_TCC5-1 nil 3757503693
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (stuff_TCC6 0
  (stuff_TCC6-1 nil 3757507775
   ("" (skosimp) (("" (assert) nil nil)) nil) nil nil))
 (stuff_TCC7 0
  (stuff_TCC7-1 nil 3757507775 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC8 0
  (stuff_TCC8-1 nil 3757689837 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (stuff_TCC9 0
  (stuff_TCC9-1 nil 3757689837 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (tail const-decl "fix_seq(s`length - 1)" bitstuffing nil)
    (single const-decl "fix_seq(1)" bitstuffing nil)
    (O const-decl "finseq" finite_sequences nil)
    (cons const-decl "fix_seq(tail`length + 1)" bitstuffing nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (stuff_TCC10 0
  (stuff_TCC10-1 nil 3757689837
   ("" (skosimp) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (stuff_works 0
  (stuff_works-1 nil 3758001569
   ("" (measure-induct+ "s`length" "s" :order ">")
    (("1" (inst -1 "cons(false, x!1)")
      (("1" (lemma "cons_length")
        (("1" (inst -1 "false" "x!1")
          (("1" (replace -1 -2)
            (("1" (assert)
              (("1" (hide -1)
                (("1" (expand "stuff" -1)
                  (("1" (lemma "cons_first")
                    (("1" (inst -1 "FALSE" "x!1")
                      (("1" (replace -1 -2 :dir rl)
                        (("1" (lemma "tail_cons")
                          (("1" (inst -1 "FALSE" "x!1")
                            (("1" (replace -1 -3)
                              (("1"
                                (lemma "tail_stuffed")
                                (("1"
                                  (inst
                                   -1
                                   "cons(FALSE, stuff(x!1, 0))")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "tail_cons")
                                      (("1"
                                        (inst
                                         -1
                                         "FALSE"
                                         "stuff(x!1, 0)")
                                        (("1"
                                          (replace -1 -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (postpone) nil nil)) nil))
    nil)
   nil shostak))
 (unstuff_TCC1 0
  (unstuff_TCC1-1 nil 3758000780 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (unstuff_TCC2 0
  (unstuff_TCC2-1 nil 3758000780 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (unstuff_TCC3 0
  (unstuff_TCC3-1 nil 3758000780 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (unstuff_TCC4 0
  (unstuff_TCC4-1 nil 3758000780 ("" (subtype-tcc) nil nil) nil nil))
 (correct_TCC1 0
  (correct_TCC1-1 nil 3762079370 ("" (subtype-tcc) nil nil) nil nil))
 (correct 0
  (correct-1 nil 3758013007
   ("" (measure-induct+ "s`length" "s" :order ">")
    (("1" (inst -1 "cons(False, x!1)")
      (("1" (lemma "cons_length")
        (("1" (inst -1 "FALSE" "x!1")
          (("1" (replace -1 -2)
            (("1" (assert) (("1" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak)))

