bitstuffing: THEORY
BEGIN
    % maximale Wiederholungen von Bits in einer "stuffed" Bitsequenz
    % Bsp: max_rep = 4
    % 100001 -> Okay da 4 wiederholende Nullen
    % 100000 -> Nicht Okay, wird von stuff-Funktion umgewandelt zu:
    % 1000010
    % max_rep: nat
    MAX_REP: above(0)

    maximal(m: nat): type = {n: nat | n <= m}

    % Sequenz mit beliebiger Länge
    bit_seq: TYPE = finite_sequence[bool]    
    % Sequenz mit genau n Bits
    fix_seq(n: nat): TYPE = {s: bit_seq | s`length = n}
    % Sequenzen mit mehr als oder gleich n Bits
    min_seq(n: nat): TYPE = {s: bit_seq | s`length >= n}

    % Bedingung für Ergebnis der "stuff" Funktions
    % index aus i, so dass von alle j von i + 1 bis i + max_rep - 1
    % s(j) = s(
    stuffed?(s: bit_seq): bool =
    	s`length <= MAX_REP OR
    	NOT EXISTS(start: below(s`length - MAX_REP)):
	    FORALL(i: {i: nat | i >= start AND i <= start + MAX_REP}):
	         s(start) IFF s(i)

    fix_stuffed(l: nat): TYPE = {s: fix_seq(l) | stuffed?(s)}
    min_stuffed(l: nat): TYPE = {s: min_seq(l) | stuffed?(s)}

    % Wrapper um genau ein Element
    single(el: bool): fix_seq(1) =
        (# length := 1, seq := LAMBDA(i: below(1)): el #)

    % Alle Bits außer das erste
    tail(s: min_seq(1)): fix_seq(s`length-1)  =
        s ^^ (1, s`length)

    % Füge Bit als "Kopf" an eine Sequenz an
    cons(head: bool, tail: bit_seq): fix_seq(tail`length + 1) =
        single(head) o tail

    % Wenn ich Element an stuffed Liste anhänge, ist dies auch stuffed wenn:
    % 	   * tail`length < MAX_REP ist
    %	   * head ungleich ersten Element von tail ist
    cons_stuffed: FORMULA
        FORALL(head: bool, tail: (stuffed?)):
	    (tail`length < MAX_REP) OR (head XOR tail(0))
	        IMPLIES stuffed?(cons(head,tail))

    % ???
    cons_same_head: FORMULA
        FORALL(head: bool, tail: bit_seq, n: below(tail`length)):
	    tail(n) IFF head IMPLIES
	        LET c = cons(head, tail) IN
	        FORALL(i: below(n+1)): c(i) IFF c(0)

    % "stuffed" Bitsequenz + Informationen über Wiederholungen am Anfange der 
    stuffed_bit_seq: TYPE = {r: [# seq: bit_seq, r_cnt: maximal(MAX_REP), r_bit: bool #]
        | stuffed?(r`seq) AND
	FORALL(i: below(min(r`r_cnt, r`seq`length))): r`r_bit IFF r`seq(i)
    }

    fix_stuffed_seq(l: nat): TYPE = {s: stuffed_bit_seq | s`seq`length = l}

    min_stuffed_seq(l: nat): TYPE = {s: stuffed_bit_seq | s`seq`length >= l}

    empty: fix_stuffed_seq(0) =
        (# seq := empty_seq, r_cnt := 0, r_bit := False #)

    accept_bool(s: stuffed_bit_seq): TYPE = {b: bool | s`r_cnt >= MAX_REP - 1 IMPLIES b XOR s`r_bit}

    cons(tail: stuffed_bit_seq, head: accept_bool(tail)): fix_stuffed_seq(tail`seq`length + 1) =
        (# seq := cons(head, tail`seq),
	   r_cnt := IF head IFF tail`r_bit THEN tail`r_cnt+1 ELSE 1 ENDIF,
	   r_bit := head #)

    % Tail von einer "stuffed" Sequenz ist immer auch Stuffed
    tail_stuffed: FORMULA
        FORALL(s: min_stuffed(1)):
	    stuffed?(tail(s))

    %n: VAR nat
    %cons(head: bool, tail: stuffed_bit_seq): fix_seq(tail`length + 1)

    %STUFF_TEST: FORMULA
    %    NOT stuffed?(cons(false, cons(false, single(False))),2)

    stuff(s: bit_seq, rep_count: nat, rep_bit: bool): RECURSIVE min_stuffed_seq(s`length) =
        IF s`length = 0 THEN
	    empty
	ELSE
	    IF rep_count >= MAX_REP AND s(0) IFF rep_bit THEN
	        cons(cons(stuff(tail(s), 1, s(0)), s(0)), NOT s(0)) % Fall 1
	    ELSE
		LET new_count = IF s(0) IFF rep_bit THEN rep_count+1 ELSE 1 ENDIF IN
	            cons(stuff(tail(s), new_count, s(0)), s(0)) % Fall 2
	    ENDIF
	ENDIF
    MEASURE s`length

    unstuff(s: (stuffed?), rep_count: nat, rep_bit: bool): RECURSIVE bit_seq =
        IF s`length = 0 THEN
	    empty_seq
	ELSE
	    IF rep_count >= MAX_REP-1 AND s(0) IFF rep_bit THEN
	        cons(s(0), unstuff(tail(tail(s)), 0, False))
	    ELSE
	        LET new_count = IF s(0) IFF rep_bit THEN rep_count+1 ELSE 1 ENDIF IN
		    cons(s(0), unstuff(tail(s), new_count, s(0)))
    	    ENDIF
	ENDIF
    MEASURE s`length

    correct: FORMULA
        FORALL(s: bit_seq):
	    s = unstuff(stuff(s, 0, False)`seq, 0, False)

    % Beweisidee für die tcc
    % Bei Fall 1 und Fall 2 entsteht durch das zusammenhängen eine stufffed bit_seq, denn
    % wenn wir s_0 mit stuff(s_1..n, 1, s(0)) zusammenhängen
    % beginnt stuff(s_1..n, 1, s(0)) mit max. max_rep-1 gleichen bits
    % Also entsteht durch das Zusammenhängen maximal max_rep Wiederholungen -> stuffed? ist erfüllt
    %n: VAR below(MAX_REP)
    %b: VAR bool
    %stuff_starts: FORMULA
    %    FORALL(s: min_seq(MAX_REP + 1)): %Bitsequenz bei der Stuffing nötig sein könnte   
    %	    EXISTS(i: below(MAX_REP+1-n)):	      %0..3+1-0 -> muss mindestens einer verschieden zu b sein
    % 	        NOT b IFF stuff(s, n, b)(i)
	    
    
END bitstuffing
