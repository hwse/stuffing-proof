bitstuffing: THEORY
BEGIN
    % Aus USB-Standard Revision 1.1 September 23, 1998 (esd.cs.ucr.edu/webres/usb11.pdf)
    %
    % 7.1.9: Bitstuffing
    %
    % "A zero is inserted after every six consecutive ones in the data
    % stream before the data is NRZI encoded, to force a transition in
    % the NRZI data stream."
    %
    % "The receiver must decode the NRZI data, recognize the stuffed bits,
    % and discard them. If the receiver sees seven consecutive ones
    % anywhere in the packet, then a bit stuffing error has occurred and
    % the packet should be ignored."
    %
    % Also kurz:
    %
    % Es gibt eine stuff-Funktion:
    % * Eingabe ist Bitfolge
    % * nach 6 aufeinanderfolgenden Einsen wird eine 0 eingefügt
    % * Ausgabe: Bitfolge mit maximal 6 aufeinanderfolgenden Einsen (das ist die stuffed-Eigenschaft)
    % 
    % zur Rückumwandlung dient die unstuff-Funktion:
    % * Eingabe: Bitfolge, welche stuffed-Eigenschaft erfüllt
    % * 0 wird nach 6 aufeinanderfolgenden Einsen erkannt und entfernen
    % * Ausgabe: Bitfolge
    % 
    % Beispiel:
    % unstuffed: 0110111111101
    % stuffed:   01101111110101
    %
    % zu beweisen ist:
    % * Ergebnis der stuff-Funktion erfüllt stuffed-Eigenschaft
    % * Information bleibt beim stuffing erhalten, also: unstuff(stuff(s)) = s, für alle s
    % 
    % Im Beweis wird nicht 6, sondern beliebige Zahl > 0 als maximal Anzahl Einsen verwendet

    % Nach MAX_ONES aufeinanderfolgenden Einsen wird 0 eingefügt
    MAX_ONES: above(0)

    % Hilfstypen
    maximal(m: nat): TYPE = {n: nat | n <= m}
    between(s: nat, e: nat): TYPE = {n: nat | s <= n AND n <= e}

    % Bit-Sequenz mit beliebiger Länge
    bit_seq: TYPE = finite_sequence[bool]    
    % Sequenz mit genau n Bits
    fix_seq(n: nat): TYPE = {s: bit_seq | s`length = n}
    % Sequenzen mit mehr als oder gleich n Bits
    min_seq(n: nat): TYPE = {s: bit_seq | s`length >= n}

    % === Axiom fü Bitsequenzen ===
    % Verwendungen dieser Axiome ist nötig, da PVS striktere Vorgaben zur Gleichheit verwendet.
    
    % Alle Seqeuenzen der Länge 0 sind im Kontext des Bitstuffing gleich
    zero_eq: AXIOM
        FORALL(s1: bit_seq, s2: bit_seq):
	    s1`length = 0 AND s2`length = 0 IMPLIES
	        s1 = s2

    % Wenn einse Sequenz die Länge 0 hat ist es immer empty_seq --> Hilfsformel
    zero_len: AXIOM
        FORALL(s: bit_seq):
	    s`length = 0 IMPLIES s = empty_seq

    % Sequenzen mit gleicher Länge und gleichen Bits sind im Kontext des Bitstuffung gleich
    seq_eq: AXIOM
        FORALL(s1: bit_seq, s2: bit_seq):
	    (s1`length = s2`length AND
	    FORALL (i: below(s1`length)):
	        s1`seq(i) IFF s2`seq(i)) IMPLIES
		    s1 = s2

    % noch beweisen, falls nicht geht axiom
    not_empty_len: FORMULA
        FORALL(s: bit_seq):
	    NOT(s = empty_seq) IMPLIES s`length > 0

    % Bedingung für Ergebnis der "stuff" Funktions:
    % Maximal MAX_ONES Einsen in Bitfolge
    % Umsetzung: Vergleich Indizes 0-1,1-2,2-3,3-4,...
    stuffed?(s: bit_seq): bool =
    	s`length <= MAX_ONES OR	
	(s`length > MAX_ONES AND
	FORALL(start: below(s`length - MAX_ONES)):
	    NOT (FORALL(i: between(start, start+MAX_ONES-1)):
	        s(i) AND s(i+1)))

    % stuffed Sequenz mit fixer Länge
    fix_stuffed(l: nat): TYPE = {s: fix_seq(l) | stuffed?(s)}
    % stuffed Sequenz mit Länge >= l
    min_stuffed(l: nat): TYPE = {s: min_seq(l) | stuffed?(s)}

    % Sequenz mit genau einen bit
    single(el: bool): fix_seq(1) =
        (# length := 1, seq := LAMBDA(i: below(1)): el #)

    % Subsequenz mit allen Bits außer das erste
    tail(s: min_seq(1)): fix_seq(s`length-1)  =
        s ^^ (1, s`length)

    % Füge Bit als "Kopf" an eine Sequenz an
    cons(head: bool, tail: bit_seq): fix_seq(tail`length + 1) =
        single(head) o tail

    % ==== Hilfsformeln für cons ===

    % PVS über Sequenzen "schlaumachen"
    % Beweis über expanden der ganzen Funktionen
    cons_first: FORMULA
        FORALL(b: bool, tail: bit_seq):
	    b IFF (cons(b,tail)(0))

    % Beweis über expanden der ganzen Funktionen
    cons_first_tail: FORMULA
        FORALL(b: bool, tail: min_seq(1)):
	    tail(0) IFF cons(b, tail)(1)

    % Beweis über expanden der ganzen Funktionen
    cons_length: FORMULA
        FORALL(head: bool, tail: bit_seq):
	    cons(head, tail)`length = tail`length + 1

    % Wie oben
    cons_get: FORMULA
        FORALL(head: bool, tail: bit_seq)(i: between(0, tail`length-1)):
	     tail(i) IFF cons(head, tail)(i+1)

    % Wie oben
    cons_get_2: FORMULA
        FORALL(head: bool, tail: bit_seq, i: below(tail`length-1)):
	    cons(head, tail)(i) =
	        IF i = 0 THEN head ELSE
		tail(i-1) ENDIF

    % ==== Hilfsformeln für tail ====

    tail_length: FORMULA
        FORALL(seq: min_seq(1)):
	    tail(seq)`length = seq`length - 1

    tail_get: FORMULA
        FORALL(seq: min_seq(2), i: between(1, seq`length-2)):
	    seq(i) = tail(seq)(i-1)

    % Beweis über Axiome
    tail_cons: FORMULA
        FORALL(head: bool, tail: bit_seq):
	    tail(cons(head, tail)) = tail

    % Beweis über seq_eq axiom
    cons_tail: FORMULA
        FORALL(s: min_seq(1)):
	    cons(s(0), tail(s)) = s

    % ==== Hilfsformeln ====
    
    % Wenn ich Element an stuffed Liste anhänge, ist dies auch stuffed wenn:
    % 	   * tail`length < MAX_ONES ist
    % Beweis über Länge: tail`length + 1 <= MAX_REP 
    cons_smaller: FORMULA
        FORALL(head: bool, tail: (stuffed?)):
	    (tail`length < MAX_ONES) IMPLIES
	        stuffed?(cons(head,tail))

    % Hilfsformel für Beweis mit Maßinduktion
    % 0 an stuffed sequenz angehangen ist immer noch eine stuffed sequenz
    % Beweis: Fälle aufsplitten und durch Einsetzen der cons-Hilfsformeln lösen
    cons_zero: FORMULA
        FORALL(head: bool, tail: (stuffed?)):
	    (NOT head) IMPLIES
	        stuffed?(cons(head,tail))

    % Alternative Formulierung von cons_zero
    % lässt sich über cons_zero beweisen
    cons_zero_alt: FORMULA
        FORALL(head: bool, tail: bit_seq):
	    (NOT head) AND stuffed?(tail) IMPLIES
	        stuffed?(cons(head, tail))

    % cons(TRUE, FALSE, (stuffed?)) ist auch immer stuffed
    cons_true_false: AXIOM
        FORALL(s: bit_seq):
	    stuffed?(s) IMPLIES
	    	stuffed?(cons(TRUE, cons(FALSE, s)))

    % Tail von einer "stuffed" Sequenz ist immer auch Stuffed
    tail_stuffed: FORMULA
        FORALL(s: min_seq(1)):
	    stuffed?(s) IMPLIES stuffed?(tail(s))

    % Füge eine 0 nach MAX_REP aufeinanderfolgenden Einsen ein. Ansonsten werden
    % keine Änderungen an der Eingabe gemacht.
    % s: Bitsequenz
    % one_count: Anzahl aufeinanderfolgenden Einsen aus vorherigen rekursiven Aufrufen
    stuff(s: bit_seq, one_count: nat): RECURSIVE min_seq(s`length) =
        IF s`length = 0 THEN
	    empty_seq
	ELSE
	    IF one_count >= MAX_ONES-1 AND s(0) THEN
	        cons(s(0), cons(false, stuff(tail(s), 0))) % Fall 1
	    ELSE
		LET new_count = IF s(0) THEN one_count+1 ELSE 0 ENDIF IN
	            cons(s(0), stuff(tail(s), new_count))
	    ENDIF
	ENDIF
    MEASURE s`length

    
    below_empty: FORMULA
        NOT EXISTS(n: below(0)): TRUE

    forall_empty: FORMULA
        FORALL(con: pred[nat], impl: bool):
	    ((FORALL(n: below(0)): con(n)) IMPLIES impl) IMPLIES impl

    

    % stuff erzeugt je nach one_count parameter an bestimmert stelle ein 0
    % --> Nutzen für Beweis 1
    % wenn stuff(s, 0) --> muss spätestens bei seq(MAX_ONES) die 0 kommen
    % wenn stuff(s, 1) --> muss spätestens bei seq(MAX_ONES-1) die 0 kommen
    % wenn stuff(s, MAX_ONES-1) -> 10 (MAX_ONES-MAX_ONES+1)
    % i hier als Hilfsvariable um Induktion bei MAX_ONES-1 anzufangen
    stuff_creates_one_simple: FORMULA
        FORALL(i: below(MAX_ONES)):
            FORALL(s: min_seq(i+2)):
	        LET one_count = MAX_ONES-1-i IN
	        LET res = stuff(s, one_count) IN
	        (EXISTS(i: below(MAX_ONES-one_count+1)): NOT res(i))

    stuff_one_count_inc: AXIOM
        FORALL(s: bit_seq):
	    stuffed?(stuff(s, 0)) IMPLIES stuffed?(stuff(s, 1))

    % Wenn stuff mit one_count > 0 aufgerufen, kann vorne beliebiges bit
    % angehangen werden und sequenz ist immer noch stuffed
    stuff_param: FORMULA
        FORALL(s: bit_seq):
	    stuffed?(stuff(s, 0)) IMPLIES
	         stuffed?(cons(TRUE, stuff(s, 1)))
    
    %stuff_creates_one: FORMULA
    %    FORALL(one_count: below(MAX_ONES)):
    %	    FORALL(s: min_seq(MAX_ONES-one_count+1)):
    %           LET res = stuff(s, one_count) IN
    %	       (EXISTS(i: below(MAX_ONES-one_count+1)): NOT res(i))
	    

    %stuff_first_ones: FORMULA
    %    FORALL(s: bit_seq):
    %	    FORALL(start_range: maximal(s`length)):
    %	    	(FORALL(i: below(first_ones)): s(i)) IMPLIES
    %	            stuffed?(stuff(s, first_ones))

    stuff_first: FORMULA
        FORALL(s: min_seq(1), x: nat):
	    s(0) IFF stuff(s, x)(0)

    % Beweis 1:  Wenn stuff mit richtigen  aufgerufen wird, ist das Ergebnis
    % stuffed
    stuff_works: FORMULA
        FORALL(s: bit_seq):
	    stuffed?(stuff(s, 0))

    % für fall das tail(tail(s)) an unstuffe gegeben wird ist sequenz
    unstuff_tailable: AXIOM
        FORALL (s: (stuffed?), one_count: nat):
            one_count >= MAX_ONES - 1 AND NOT s`length = 0
            AND finseq_appl[boolean](s)(0) 
                IMPLIES tail(s)`length >= 1;
	    
    % Entferne Null nach MAX_REP aufeinanderfolgenden Einsen
    % s: Bit-Seqenz, welche die stuffed Eigenschafterfüllt
    % one_count: Anzahl der bisherigen aufeinanderfolgenden Einsen aus vorherigen rekursiven Aufrufen
    unstuff(s: (stuffed?), one_count: nat): RECURSIVE bit_seq =
        IF s`length = 0 THEN
	    empty_seq
	ELSE
	    IF one_count >= MAX_ONES-1 AND s(0) THEN
	        cons(s(0), unstuff(tail(tail(s)), 0))
	    ELSE
	        LET new_count = IF s(0) THEN one_count+1 ELSE 0 ENDIF IN
		    cons(s(0), unstuff(tail(s), new_count))
    	    ENDIF
	ENDIF
    MEASURE s`length

    unstuff_first: FORMULA
        FORALL(s: min_seq(1), one_count: nat):
	    s(0) = unstuff(s, one_count)(0)

    correct_helper: FORMULA
        FORALL(s: min_seq(1)):
	    unstuff(stuff(tail(s), 0), 0) = unstuff(tail(stuff(s, 0)), 1)

    % Beweis 2
    correct: FORMULA
        FORALL(s: bit_seq):
	    s = unstuff(stuff(s, 0), 0)
    
END bitstuffing
