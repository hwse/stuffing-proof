bitstuffing: THEORY
BEGIN
    % maximale Wiederholungen von Bits in einer "stuffed" Bitsequenz
    % Bsp: max_rep = 4
    % 100001 -> Okay da 4 wiederholende Nullen
    % 100000 -> Nicht Okay, wird von stuff-Funktion umgewandelt zu:
    % 1000010
    max_rep: nat

    range: VAR[nat, nat]

    %  "unstuffed" Bitsequenz
    %unstuffed_bit_seq: TYPE = [unstuffed_index->bool]
    bit_seq: TYPE = finite_sequence[bool]
    
    
    % f√ºr alle indizes i teilfolge aus gleichen bits
    % index aus i, so dass von alle j von i + 1 bis i + max_rep - 1 s(j) = s(
    % In der Bitsequenz ist die Anzahl gleicher aufeinandender Bits <= max_rep
    stuffed?(s: bit_seq): bool =
    	s`length <= max_rep OR
    	NOT EXISTS(start: below(s`length - max_rep)):
	    FORALL(i: {i: nat | i > start AND i <= start + max_rep}):
	         s(start) IFF s(i)
	    
    % "stuffed" Bitsequenz
    stuffed_bit_seq: TYPE = (stuffed?)

    single(el: bool): bit_seq =
        (# length := 1, seq := LAMBDA(i: below(1)): el #)

    stuff(s: bit_seq, rep_count: nat, rep_bit: bool): RECURSIVE stuffed_bit_seq =
        IF s`length = 0 THEN
	    empty_seq
	ELSE
	    IF rep_count >= max_rep AND s(0) IFF rep_bit THEN
	        LET tail: bit_seq = ^^(s, (1, s`length)) IN
	          o(single(NOT rep_bit), o(single(rep_bit), stuff(tail, 0, False)))
	    ELSE
	        LET tail: bit_seq = ^^(s, (1, s`length)) IN
		LET new_count = IF s(0) IFF rep_bit THEN rep_count+1 ELSE 1 ENDIF IN
	          o(single(s(0)), stuff(tail, new_count, s(0)))
	    ENDIF
	ENDIF
    MEASURE s`length
    
    unstuff(ss: stuffed_bit_seq, rep_count: nat, rep_bit: bool): bit_seq
    
END bitstuffing
